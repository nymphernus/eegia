import streamlit as st
import matplotlib.pyplot as plt
import tempfile
import os
import pandas as pd
import hashlib

from __init__ import setup_project_paths
setup_project_paths()

from core.data.loader import load_edf, load_csv
from core.data.manager import DataManager

st.title("üìÇ –î–∞–Ω–Ω—ã–µ")

manager = DataManager()

# ==============================
# üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è hash —Ñ–∞–π–ª–∞ (–¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏)
# ==============================
def file_hash(file_bytes):
    return hashlib.md5(file_bytes).hexdigest()

# ==============================
# üîπ –ë–ª–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
# ==============================
st.header("‚ûï –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª")

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ EEG —Ñ–∞–π–ª (.edf –∏–ª–∏ .csv)", type=["edf", "csv"])

if uploaded_file is not None:
    file_bytes = uploaded_file.getvalue()
    file_type = uploaded_file.name.split(".")[-1]
    fhash = file_hash(file_bytes)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ñ–∞–π–ª –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
    existing = [s for s in manager.list_samples() if s.get("hash") == fhash]
    if existing:
        st.warning(f"‚ö†Ô∏è –§–∞–π–ª `{uploaded_file.name}` —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω (ID={existing[0]['id']})")
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ –∏ –≥—Ä—É–∑–∏–º
        with tempfile.NamedTemporaryFile(delete=False, suffix=f'.{file_type}') as tmp_file:
            tmp_file.write(file_bytes)
            tmp_file_path = tmp_file.name

        try:
            if file_type == "edf":
                sample = load_edf(tmp_file_path)
            elif file_type == "csv":
                df_temp = pd.read_csv(tmp_file_path, nrows=1)
                has_labels_flag = 'label' in [col.lower() for col in df_temp.columns]
                sample = load_csv(tmp_file_path, sfreq=256, has_labels=has_labels_flag)
            else:
                st.error("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç")
                st.stop()
        finally:
            os.unlink(tmp_file_path)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å hash
        sample_id = manager.add_sample(sample, filename=uploaded_file.name)
        manager.catalog[sample_id]["hash"] = fhash
        manager._save_catalog()

        st.success(f"–§–∞–π–ª {uploaded_file.name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω (ID={sample_id})")

# ==============================
# üîπ –ö–∞—Ç–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# ==============================
st.header("üìã –ö–∞—Ç–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

catalog = manager.list_samples()
if not catalog:
    st.info("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª.")
    st.stop()

df_catalog = pd.DataFrame(catalog)
df_catalog_display = df_catalog[["id", "filename", "sfreq", "n_channels", "n_samples"]]

st.dataframe(df_catalog_display, use_container_width=True, hide_index=True)

# ==============================
# üîπ –î–µ–π—Å—Ç–≤–∏—è –ø–æ –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏
# ==============================
st.subheader("‚ö° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏")

for sample in catalog:
    col1, col2, col3 = st.columns([3, 1, 1])
    with col1:
        st.write(f"**{sample['filename']}** (ID={sample['id']}) ‚Äî {sample['n_channels']} –∫–∞–Ω–∞–ª–æ–≤, {sample['sfreq']} Hz")
    with col2:
        if st.button("üìä –ü–æ–∫–∞–∑–∞—Ç—å", key=f"show_{sample['id']}"):
            st.session_state["selected_id"] = sample["id"]
            st.rerun()   # ‚úÖ –Ω–æ–≤—ã–π API –≤–º–µ—Å—Ç–æ experimental_rerun
    with col3:
        if st.button("üóë –£–¥–∞–ª–∏—Ç—å", key=f"del_{sample['id']}"):
            manager.delete_sample(sample["id"])
            st.rerun()

# ==============================
# üîπ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
# ==============================
if "selected_id" in st.session_state:
    selected_id = st.session_state["selected_id"]
    data, meta = manager.load_sample(selected_id)

    st.subheader(f"üîé –ó–∞–ø–∏—Å—å {selected_id}")
    st.write(f"–§–∞–π–ª: {meta['filename']}")
    st.write(f"–ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏: {meta['sfreq']} Hz")
    st.write(f"–ö–∞–Ω–∞–ª—ã: {meta['channels'][:5]}... ({meta['n_channels']} –≤—Å–µ–≥–æ)")
    st.write(f"–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {data.shape}")
    st.write(f"–î–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π –≤ –ø–µ—Ä–≤–æ–º –∫–∞–Ω–∞–ª–µ: [{data[0].min():.6f}, {data[0].max():.6f}]")

    # ==============================
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞
    # ==============================
    st.sidebar.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞")

    amplitude_scale = st.sidebar.slider(
        "–ú–∞—Å—à—Ç–∞–± –∞–º–ø–ª–∏—Ç—É–¥—ã", 
        min_value=0.5, max_value=10000.0, value=10.0, step=0.1
    )

    time_samples = st.sidebar.slider(
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Å—á—ë—Ç–æ–≤", 
        min_value=100, max_value=50000, value=5000, step=100
    )

    vertical_spacing = st.sidebar.slider(
        "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏", 
        min_value=0.5, max_value=1000.0, value=10.0, step=0.5
    )

    channels_to_show = st.sidebar.slider(
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤", 
        min_value=1, max_value=64, value=32, step=1
    )

    # ==============================
    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    # ==============================
    import matplotlib.pyplot as plt
    fig, ax = plt.subplots(figsize=(12, 8))
    time_limit = min(time_samples, data.shape[1])
    channel_limit = min(channels_to_show, data.shape[0])
    
    for i in range(channel_limit):
        data_segment = data[i][:time_limit] * amplitude_scale
        ax.plot(data_segment + i * vertical_spacing, linewidth=0.8)
    
    ax.set_xlabel('–í—Ä–µ–º—è (–æ—Ç—Å—á—ë—Ç—ã)')
    ax.set_ylabel('–ê–º–ø–ª–∏—Ç—É–¥–∞ (—É—Å–ª–æ–≤–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã)')
    ax.set_title(f'EEG —Å–∏–≥–Ω–∞–ª—ã (–º–∞—Å—à—Ç–∞–±: {amplitude_scale}x, –∫–∞–Ω–∞–ª—ã: {channel_limit}, –æ—Ç—Å—á—ë—Ç—ã: {time_limit})')
    
    st.pyplot(fig)
