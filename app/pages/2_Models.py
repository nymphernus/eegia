from __init__ import setup_project_paths
setup_project_paths()

import os
import streamlit as st
import tempfile

from core.models.models_manager import ModelsManager

if 'page_initialized' not in st.session_state:
    st.session_state.page_initialized = True
    st.set_page_config(
        layout="wide",
        initial_sidebar_state="expanded"
    )

st.set_page_config(layout="wide", initial_sidebar_state="expanded")
st.title("üß† Models")

manager = ModelsManager()

st.sidebar.header("üñ•Ô∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
try:
    import torch
    if torch.cuda.is_available():
        st.sidebar.success(f"‚úÖ CUDA –¥–æ—Å—Ç—É–ø–Ω–∞ ({torch.cuda.device_count()} —É—Å—Ç—Ä–æ–π—Å—Ç–≤)")
        st.sidebar.info(f"–¢–µ–∫—É—â–µ–µ: {torch.cuda.get_device_name()}")
    else:
        st.sidebar.warning("‚ö†Ô∏è CUDA –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
except ImportError:
    st.sidebar.error("‚ùå PyTorch –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

st.subheader("üì• –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ–ª—å")

source_type = st.radio("–ò—Å—Ç–æ—á–Ω–∏–∫", ["–§–∞–π–ª", "HuggingFace Hub"], horizontal=True)

if source_type == "HuggingFace Hub":
    model_type = "transformers"
else:
    model_type = st.selectbox("–¢–∏–ø –º–æ–¥–µ–ª–∏", ["tensorflow", "pytorch"])

model_path = None
if source_type == "–§–∞–π–ª":
    uploaded_model = st.file_uploader(
        "–§–∞–π–ª –º–æ–¥–µ–ª–∏ (.h5, .pt, .bin, .pth, .ckpt)",
        type=["h5", "pt", "bin", "pth", "ckpt"]
    )
    if uploaded_model is not None:
        tmp_dir = tempfile.gettempdir()
        model_path = os.path.join(tmp_dir, uploaded_model.name)
        with open(model_path, "wb") as f:
            f.write(uploaded_model.getvalue())

        st.success(f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {uploaded_model.name}")
else:
    repo_id = st.text_input("HuggingFace repo_id", placeholder="org/model –∏–ª–∏ model")
    if repo_id.strip():
        model_path = repo_id.strip()
        st.info(f"–ë—É–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –º–æ–¥–µ–ª—å –∏–∑ HuggingFace: {repo_id}")

if st.button("üöÄ –î–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É"):
    if not model_path:
        st.error("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ repo_id")
    else:
        try:
            model_id = manager.add_model(
                name=None,
                model_type=model_type,
                file_path=model_path,
                metadata={"source": source_type}
            )
            st.success(f"‚úÖ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (ID={model_id})")
            st.rerun()
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {e}")

st.subheader("üìÇ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏")
models = manager.list_models()
if not models:
    st.info("–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
else:
    for m in models:
        cols = st.columns([3, 3, 2, 2])
        with cols[0]:
            st.markdown(f"**{m['name']}**")
            st.caption(m["file_path"])
        with cols[1]:
            st.text(f"type: {m['model_type']}")
            st.text(f"added: {m.get('created_at_formatted', m.get('created_at',''))}")
        with cols[2]:
            if "current_model_id" in st.session_state and st.session_state["current_model_id"] == m['id']:
                if st.button("–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", key=f"deact_{m['id']}"):
                    st.session_state.pop("current_model", None)
                    st.session_state.pop("current_model_id", None)
                    st.success(f"–ú–æ–¥–µ–ª—å {m['name']} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
                    st.rerun()
            else:
                if st.button("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", key=f"act_{m['id']}"):
                    try:
                        with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏..."):
                            model = manager.load_model(m['id'])
                        st.session_state["current_model"] = model
                        st.session_state["current_model_id"] = m['id']
                        st.success(f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞: {m['name']}")
                        st.rerun()
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞: {e}")
        with cols[3]:
            if st.button("–£–¥–∞–ª–∏—Ç—å", key=f"del_{m['id']}"):
                ok = manager.delete_model(m['id'])
                if ok:
                    st.success("–£–¥–∞–ª–µ–Ω–æ")
                    st.rerun()
                else:
                    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å")

if "current_model" in st.session_state:
    current_id = st.session_state.get("current_model_id")
    info = manager.get_model_info(current_id) if current_id else None
    st.subheader(f"üîÆ –ò–Ω—Ñ–µ—Ä–µ–Ω—Å (–∞–∫—Ç–∏–≤–Ω–∞: {info['name'] if info else '‚Äî'})")

    model = st.session_state["current_model"]

    try:
        st.json(model.get_info())
    except Exception:
        pass

    if info and info["model_type"] == "transformers":
        text_input = st.text_area("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç", "–ü—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", height=100)
        if st.button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç"):
            try:
                with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑..."):
                    preds = model.predict([text_input])
                st.write("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
                st.write(preds)
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞: {e}")
    else:
        st.info("–ò–Ω—Ñ–µ—Ä–µ–Ω—Å –¥–µ–º–æ")
else:
    st.subheader("üîÆ –ò–Ω—Ñ–µ—Ä–µ–Ω—Å")
    st.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –º–æ–¥–µ–ª–∏. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –º–æ–¥–µ–ª—å, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑.")

